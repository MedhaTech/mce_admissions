<?php
defined('BASEPATH') or exit('No direct script access allowed');

use io\billdesk\client\hmacsha256\BillDeskJWEHS256Client;
use io\billdesk\client\Logging;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;

class Mcehook extends CI_Controller
{

    private $client;

	protected function setUp(): void
	{
		$this->client = new BillDeskJWEHS256Client("https://pguat.billdesk.io", "bduatv2ktk", "16uUloqqrs2iMUZnrojXtmkTeSQqjYIX");
		$logger = new Logger("default");
		$logger->pushHandler(new StreamHandler('php://stdout', Logger::DEBUG));
		$this->client->setLogger($logger);
	}

	function __construct()
	{
		parent::__construct();
		$this->CI = &get_instance();
		$this->load->model('admin_model', '', TRUE);

		$this->load->library(array('table', 'form_validation'));
		$this->load->helper(array('form', 'form_helper', 'file'));
		date_default_timezone_set('Asia/Kolkata');
		ini_set('upload_max_filesize', '20M');
	}


	public function index()
	{
		require_once APPPATH . 'libraries/Jwt.php';
		$this->load->library('logger');
		$message = "BillDesk Response - " . json_encode($_POST). "\n";
		$this->logger->write('billdesk', 'debug', $message);
		$tx = "";
		if (!empty($_POST)) {
			$tx_array = $_POST;
			if (isset($tx_array['transaction_response'])) {
				$tx = $tx_array['transaction_response'];
			}
		}


		if (!empty($tx)) {
			$response_decoded = JWT::decode($tx, "16uUloqqrs2iMUZnrojXtmkTeSQqjYIX", 'HS256');
			$response_array = (array) $response_decoded;
			$response_json =  json_encode($response_array);
			$message = "BillDesk callback Response decode - " . $response_json. "\n";
			$this->logger->write('billdesk', 'debug', $message);

			if ($response_array['auth_status'] == '0300') {
				$status = 'pass';
			} else if ($response_array['auth_status'] == '0002') {
				$status = 'unknown';
			} else {
				$status = 'fail';
			}



			$return['amount']	    = (int)$response_array['amount'];
			$return['order_id']	    = $response_array['orderid'];
			$return['status']		= $status;
			$return['pgresponse']	= $response_json;
			$return['pgid']	        = $response_array['transactionid'];

			$updateDetails = array(
				'transaciton_date' => date('Y-m-d'),
				'transaction_id' => $response_array['transactionid'],
				'txn_response' => $response_json
			);

			$result = $this->admin_model->updateDetailsbyfield('reference_no', $response_array['orderid'], $updateDetails, 'transactions');

            
		} else {
			$status = 'fail';
			$return['status']		= $status;
			echo "INVALID REQUEST";
		}

		
	}


}